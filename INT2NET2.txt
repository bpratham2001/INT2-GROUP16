training_data = datasets.CIFAR10(
    root="data",
    train=True,
    download=True,
    transform=transforms.Compose([
        transforms.RandomAffine(0,scale=(0.5,1.5)),
        transforms.ColorJitter(0.25, 0.25, 0.25, 0.25),
        transforms.RandomRotation(20),
        transforms.RandomVerticalFlip(0.4),
        transforms.RandomHorizontalFlip(0.4),
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),

    ])
)

training_data = DataLoader(training_data, batch_size=batch_sz, shuffle=True,drop_last=True)

test_data = datasets.CIFAR10(
    root="data",
    train=False,
    download=True,
    transform=transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
    ])
)
test_data = DataLoader(test_data, batch_size=batch_sz, shuffle=True)



class NET2(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Conv2d(3, 128, kernel_size=3, stride=1, padding=1, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=0),
            nn.Conv2d(128, 256, kernel_size=3, stride=2, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(True),
            nn.Conv2d(256, 512, kernel_size=3, stride=2, bias=False))

        self.res1 = nn.Sequential(
            nn.BatchNorm2d(512),
            nn.ReLU(True),
            nn.Conv2d(512, 512, 3, 1, 1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU(True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=0),
            nn.Conv2d(512, 512, 3, 1, 1, bias=False))

        self.res2 = nn.Sequential(
            nn.BatchNorm2d(512),
            nn.ReLU(True),
            nn.Conv2d(512, 512, 3, 1, 1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU(True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=0),
            nn.Conv2d(512, 512, 3, 1, 1, bias=False))

        self.net2 = nn.Sequential(
            nn.Conv2d(512, 256, kernel_size=3, stride=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(True),
            nn.Dropout(0.2))

        self.fc = nn.Sequential(
            nn.Linear(256, 128),
            nn.ReLU(True),
            nn.Dropout(0.2),
            nn.Linear(128, 10))

    def forward(self, image):
        feature = self.net(image)
        feature = feature + self.res1(feature)
        feature = feature + self.res2(feature)
        feature = self.net2(feature)
        feature = feature.view(-1, 256)
        return self.fc(feature)